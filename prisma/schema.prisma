generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  name              String?
  image             String?
  role              UserRole        @default(PENDING)
  emailVerified     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  processedRequests AccessRequest[] @relation("ProcessedBy")
  accessRequest     AccessRequest?
  accounts          Account[]
  addresses         Address[]
  orders            Order[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AccessRequest {
  id          String              @id @default(uuid())
  userId      String              @unique
  status      AccessRequestStatus @default(PENDING)
  documents   Json[]
  adminNotes  String?
  createdAt   DateTime            @default(now())
  processedAt DateTime?
  processedBy String?
  processor   User?               @relation("ProcessedBy", fields: [processedBy], references: [id])
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_requests")
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  name      String
  street    String
  commune   String
  city      String
  region    String
  zipCode   String
  phone     String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("addresses")
}

model ShippingZone {
  id           String  @id @default(uuid())
  commune      String  @unique
  cost         Decimal @db.Decimal(10, 2)
  deliveryDays Int
  active       Boolean @default(true)

  @@map("shipping_zones")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  active      Boolean   @default(true)
  showInHome  Boolean   @default(false)
  products    Product[]

  @@map("categories")
}

model Product {
  id                  String           @id @default(uuid())
  name                String
  slug                String           @unique
  description         String
  price               Decimal          @db.Decimal(10, 2)
  stock               Int
  images              Json[]
  categoryId          String
  active              Boolean          @default(true)
  featured            Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  allowIndividualSale Boolean          @default(true)
  orderItems          OrderItem[]
  variants            ProductVariant[]
  category            Category         @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  units      Int
  price      Decimal     @db.Decimal(10, 2)
  active     Boolean     @default(true)
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  addressId     String
  status        OrderStatus   @default(PENDING)
  subtotal      Decimal       @db.Decimal(10, 2)
  shippingCost  Decimal       @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  preferenceId  String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]
  address       Address       @relation(fields: [addressId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  payments      Payment[]

  @@map("orders")
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  productId        String
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  total            Decimal         @db.Decimal(10, 2)
  productVariantId String?
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model Payment {
  id                String         @id @default(uuid())
  orderId           String
  mercadopagoId     String?        @unique
  preferenceId      String?
  collector_id      String?
  flowToken         String?        @unique
  flowOrderId       String?
  flowStatus        Int?
  paymentGateway    PaymentGateway @default(MERCADOPAGO)
  status            PaymentStatus  @default(PENDING)
  statusDetail      String?
  paymentType       String?
  paymentMethod     String?
  amount            Decimal        @db.Decimal(10, 2)
  transactionAmount Decimal?       @db.Decimal(10, 2)
  currency          String         @default("CLP")
  dateCreated       DateTime?
  dateApproved      DateTime?
  externalReference String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum UserRole {
  ADMIN
  CLIENT
  PENDING
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum PaymentGateway {
  MERCADOPAGO
  FLOW
}
