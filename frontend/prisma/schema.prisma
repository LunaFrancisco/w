generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(PENDING)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts          Account[]
  sessions          Session[]
  accessRequest     AccessRequest?
  addresses         Address[]
  orders            Order[]
  processedRequests AccessRequest[] @relation("ProcessedBy")

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AccessRequest {
  id          String              @id @default(uuid())
  userId      String              @unique
  status      AccessRequestStatus @default(PENDING)
  documents   Json[]
  adminNotes  String?
  createdAt   DateTime            @default(now())
  processedAt DateTime?
  processedBy String?

  // Relations
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  processor User? @relation("ProcessedBy", fields: [processedBy], references: [id])

  @@map("access_requests")
}

model Address {
  id        String  @id @default(uuid())
  userId    String
  name      String
  street    String
  commune   String
  city      String
  region    String
  zipCode   String
  phone     String
  isDefault Boolean @default(false)

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model ShippingZone {
  id           String  @id @default(uuid())
  commune      String  @unique
  cost         Decimal @db.Decimal(10, 2)
  deliveryDays Int
  active       Boolean @default(true)

  @@map("shipping_zones")
}

model Category {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String?
  image       String?
  active      Boolean @default(true)

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  images      Json[]
  categoryId  String
  active      Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id             String      @id @default(uuid())
  userId         String
  addressId      String
  status         OrderStatus @default(PENDING)
  subtotal       Decimal     @db.Decimal(10, 2)
  shippingCost   Decimal     @db.Decimal(10, 2)
  total          Decimal     @db.Decimal(10, 2)
  mercadopagoId  String?
  paymentStatus  String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum UserRole {
  ADMIN
  CLIENT
  PENDING
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
}
